//
//  DishSyncService.swift
//  Random4Dinner
//
//  Created by Oleg Podrez on 31.03.25.
//

import Foundation
import SwiftData
import Network

enum DishSyncError: Error {
    case exportFailed(Error)
    case importFailed(Error)
}

class DishSyncService {

    // MARK: - –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –±–ª—é–¥ –ø–æ id
    func removeDuplicateDishes(context: ModelContext) {
        do {
            let allDishes = try context.fetch(FetchDescriptor<Dish>())
            var seen: Set<UUID> = []
            var duplicates: [Dish] = []

            for dish in allDishes {
                if seen.contains(dish.id) {
                    duplicates.append(dish)
                } else {
                    seen.insert(dish.id)
                }
            }

            for duplicate in duplicates {
                context.delete(duplicate)
            }

            if !duplicates.isEmpty {
                try context.save()
                print("üßπ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –±–ª—é–¥: \(duplicates.count)")
                NotificationCenterService.shared.showInfo("üßπ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –±–ª—é–¥: \(duplicates.count)")
            } else {
                print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –±–ª—é–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            }

        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: \(error)")
            NotificationCenterService.shared.showError(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤",
                resolution: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é"
            )
        }
    }

    static let shared = DishSyncService()

    private init() {
        startNetworkMonitor()
    }

    // MARK: - –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å NAS
    func syncDishes(context: ModelContext) async {
        guard await isLocalNetworkReachable() else {
            print("üö´ –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        }

        do {
            let remoteDishes = try await APIService.shared.fetchDishes()
            print("üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å NAS: \(remoteDishes.count) –±–ª—é–¥")

            let localDishes = try context.fetch(FetchDescriptor<Dish>())

            var localDict: [UUID: Dish] = Dictionary(
                uniqueKeysWithValues: localDishes.compactMap { dish in
                    guard let id = dish.id as UUID? else { return nil }
                    return (id, dish)
                }
            )

            var remoteDict: [UUID: DishDECOD] = Dictionary(
                uniqueKeysWithValues: remoteDishes.compactMap { dish in
                    guard let id = dish.id else { return nil }
                    return (id, dish)
                }
            )

            var changesMade = false
            var updatedCount = 0
            var addedCount = 0
            var deletedCount = 0

            for (id, remoteDish) in remoteDict {
                if let localDish = localDict[id] {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if localDish.name != (remoteDish.name ?? "") ||
                        localDish.about != (remoteDish.about ?? "") ||
                        localDish.imageBase64 != (remoteDish.imageBase64 ?? "") ||
                        localDish.category != (remoteDish.category ?? .lunch) {

                        localDish.updateFromDecoded(remoteDish)
                        updatedCount += 1
                        changesMade = true
                    }
                    localDict.removeValue(forKey: id)
                } else {
                    // –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ–±—ä–µ–∫—Ç —Å —Ç–∞–∫–∏–º ID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
                    if try context.fetch(FetchDescriptor<Dish>(predicate: #Predicate { $0.id == id })).isEmpty {
                        context.insert(Dish(from: remoteDish))
                        addedCount += 1
                        changesMade = true
                    } else {
                        print("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å ID: \(id)")
                    }
                }
            }

            self.removeDuplicateDishes(context: context)

            // –£–¥–∞–ª—è–µ–º –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            for (_, dish) in localDict {
                context.delete(dish)
                deletedCount += 1
                changesMade = true
            }

            if changesMade {
                try context.save()
                let summary = "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã: \(updatedCount), ‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã: \(addedCount), ‚ùå –£–¥–∞–ª–µ–Ω—ã: \(deletedCount)"
                NotificationCenterService.shared.showSuccess(summary)
                print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\(summary)")
            } else {
                print("‚è© –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                NotificationCenterService.shared.showSuccess("‚è© –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
            }

        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: \(error)")
            NotificationCenterService.shared.showError(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–∞ —Å NAS",
                resolution: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NAS –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ"
            )
        }
    }
    // MARK: - –ò–º–ø–æ—Ä—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ JSON
    func importDishesFromLocalJSON(context: ModelContext) {
        let url = getDocumentsDirectory().appendingPathComponent("dishes.json")
        guard let data = try? Data(contentsOf: url) else {
            print("üìÇ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        }

        do {
            let container = try JSONDecoder().decode(DishesContainer.self, from: data)
            let existingDishes = try context.fetch(FetchDescriptor<Dish>())
            var localDict: [UUID: Dish] = existingDishes.reduce(into: [:]) { dict, dish in
                if dict[dish.id] == nil {
                    dict[dish.id] = dish
                }
            }
            var addedCount = 0
            var updatedCount = 0
            var changesMade = false

            for decoded in container.dishes {
                guard let id = decoded.id else { continue }

                if let localDish = localDict[id] {
                    localDish.updateFromDecoded(decoded)
                    updatedCount += 1
                    changesMade = true
                    localDict.removeValue(forKey: id)
                } else {
                    // –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ–±—ä–µ–∫—Ç —Å —Ç–∞–∫–∏–º ID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
                    if try context.fetch(FetchDescriptor<Dish>(predicate: #Predicate { $0.id == id })).isEmpty {
                        context.insert(Dish(from: decoded))
                        addedCount += 1
                        changesMade = true
                    } else {
                        print("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∏–∑ JSON —Å ID: \(id)")
                    }
                }
            }

            self.removeDuplicateDishes(context: context)

            // –ù–µ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±–ª—é–¥–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∏–º–ø–æ—Ä—Ç–µ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é)

            if changesMade {
                try context.save()
                print("üì¶ –ò–º–ø–æ—Ä—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON –∑–∞–≤–µ—Ä—à—ë–Ω. ‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã: \(addedCount), üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã: \(updatedCount)")
            } else {
                print("‚è© –ò–º–ø–æ—Ä—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON: –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            }

            // ‚è±Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            DispatchQueue.main.asyncAfter(deadline: .now() + 3) {
                NotificationCenterService.shared.showInfo("–ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å NAS...")
                Task {
                    await DishSyncService.shared.syncDishes(context: context)
                }
            }

        } catch {
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON: \(error)")
        }
    }
        //MARK: - –ò–º–ø–æ—Ä—Ç –∏–∑ NAS
    func importDishesFromNASIfNeeded(context: ModelContext) async {
        do {
            let remoteDishes = try await APIService.shared.fetchDishes()
            let existingDishes = try context.fetch(FetchDescriptor<Dish>())
            let existingIDs = Set(existingDishes.compactMap { $0.id })

            var addedCount = 0

            for remote in remoteDishes {
                guard let id = remote.id, !existingIDs.contains(id) else {
                    continue // –±–ª—é–¥–æ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                }

                let newDish = Dish(
                    name: remote.name ?? "",
                    about: remote.about ?? "",
                    imageBase64: remote.imageBase64 ?? "",
                    category: remote.category ?? .lunch
                )
                newDish.id = id

                context.insert(newDish)
                addedCount += 1
            }

            if addedCount > 0 {
                try context.save()
                print("üì• –ò–º–ø–æ—Ä—Ç —Å NAS –∑–∞–≤–µ—Ä—à—ë–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–æ \(addedCount) –Ω–æ–≤—ã—Ö –±–ª—é–¥")
                NotificationCenterService.shared.showSuccess("üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ \(addedCount) –Ω–æ–≤—ã—Ö –±–ª—é–¥ —Å NAS")
            } else {
                print("‚è© –ò–º–ø–æ—Ä—Ç —Å NAS: –Ω–æ–≤—ã—Ö –±–ª—é–¥ –Ω–µ—Ç")
                NotificationCenterService.shared.showInfo("‚è© –ù–æ–≤—ã—Ö –±–ª—é–¥ –Ω–∞ NAS –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            }

        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª—é–¥ —Å NAS: \(error)")
            NotificationCenterService.shared.showError(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –±–ª—é–¥ —Å NAS",
                resolution: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å NAS –∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞"
            )
        }
    }
    // MARK: - –≠–∫—Å–ø–æ—Ä—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ NAS
    func exportDishesToJSON(context: ModelContext) async {
        do {
            let dishes = try context.fetch(FetchDescriptor<Dish>())
            let uniqueDishes = Dictionary(grouping: dishes, by: \.id).compactMapValues { $0.first }.values
            let encodedDishes = uniqueDishes.map {
                DishDECOD(
                    id: $0.id,
                    name: $0.name,
                    about: $0.about,
                    imageBase64: $0.imageBase64,
                    category: $0.category ?? .lunch
                )
            }

            let container = DishesContainer(dishes: encodedDishes)
            let jsonData = try JSONEncoder().encode(container)
            let url = getDocumentsDirectory().appendingPathComponent("dishes.json")

            // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            let existingData = try? Data(contentsOf: url)
            if existingData != jsonData {
                try jsonData.write(to: url)
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ JSON: \(url)")

                try await APIService.shared.uploadDishes(encodedDishes)
                print("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ NAS: \(encodedDishes.count) –±–ª—é–¥")
            } else {
                print("‚è© –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            }

        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: \(error)")
            NotificationCenterService.shared.showError(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö",
                resolution: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª dishes.json –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å NAS"
            )
        }
    }

     func isLocalNetworkReachable() async -> Bool {
        let config = URLSessionConfiguration.default
        config.waitsForConnectivity = false
        let session = URLSession(configuration: config)
        let testURL = URL(string: "http://192.168.1.168:8888/remote.php/dav/files/Podrez/Random4DinnerApp/dishes.json")!

        var request = URLRequest(url: testURL)
        request.httpMethod = "HEAD"
        do {
            let (_, response) = try await session.data(for: request)
            if let httpResponse = response as? HTTPURLResponse {
                return (200...299).contains(httpResponse.statusCode)
            }
        } catch {
            print("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å: \(error.localizedDescription)")
        }
        return false
    }

    private func getDocumentsDirectory() -> URL {
        FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
    }

    private func startNetworkMonitor() {
        let monitor = NWPathMonitor()
        monitor.pathUpdateHandler = { [weak self] path in
            if path.status == .satisfied {
                print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞")
                if let context = self?.latestContext {
                    Task {
                        print("üåê –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏...")
                        await self?.syncDishes(context: context)
                    }
                }
            } else {
                print("üö´ –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –ù–ï –¥–æ—Å—Ç—É–ø–Ω–∞")
            }
        }
        let queue = DispatchQueue(label: "NetworkMonitor")
        monitor.start(queue: queue)
    }

    func areCredentialsPresent() -> Bool {
        let username = KeychainHelper.shared.read(key: "webdav_username")
        let password = KeychainHelper.shared.read(key: "webdav_password")
        return !(username?.isEmpty ?? true) && !(password?.isEmpty ?? true)
    }
    private var latestContext: ModelContext?

    func setLatestContext(_ context: ModelContext) {
        latestContext = context
    }
}
