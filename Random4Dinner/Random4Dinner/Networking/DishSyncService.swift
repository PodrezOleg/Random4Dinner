//
//  DishSyncService.swift
//  Random4Dinner
//
//  Created by Oleg Podrez on 31.03.25.
//

import Foundation
import SwiftData
import Network

enum DishSyncError: Error {
    case exportFailed(Error)
    case importFailed(Error)
}

class DishSyncService {
    
    static let shared = DishSyncService()
    
    private init() {
        startNetworkMonitor()
    }
    
    private var latestContext: ModelContext?
    
    func setLatestContext(_ context: ModelContext) {
        latestContext = context
    }
    
    // MARK: - –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –±–ª—é–¥ –ø–æ id
    func removeDuplicateDishes(context: ModelContext) {
        do {
            let allDishes = try context.fetch(FetchDescriptor<Dish>())
            var seen: Set<UUID> = []
            var duplicates: [Dish] = []
            
            for dish in allDishes {
                if seen.contains(dish.id) {
                    duplicates.append(dish)
                } else {
                    seen.insert(dish.id)
                }
            }
            
            for duplicate in duplicates {
                context.delete(duplicate)
            }
            
            if !duplicates.isEmpty {
                try context.save()
                print("üßπ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –±–ª—é–¥: \(duplicates.count)")
                NotificationCenterService.shared.showInfo("üßπ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –±–ª—é–¥: \(duplicates.count)")
            } else {
                print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –±–ª—é–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            }
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: \(error)")
            NotificationCenterService.shared.showError(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤",
                resolution: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é"
            )
        }
    }
    
    // MARK: - –ò–º–ø–æ—Ä—Ç —Å Google Drive
    func importFromGoogleDrive(context: ModelContext) async {
        do {
            let data = try await withCheckedThrowingContinuation { continuation in
                GoogleDriveService.shared.downloadDishesJSON { result in
                    switch result {
                    case .success(let data):
                        continuation.resume(returning: data)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                    }
                }
            }
            let container = try JSONDecoder().decode(DishesContainer.self, from: data)
            let localDishes = try context.fetch(FetchDescriptor<Dish>())
            
            var localDict = Dictionary(uniqueKeysWithValues: localDishes.map { ($0.id, $0) })
            var updated = 0
            var added = 0
            var changesMade = false
            
            for decoded in container.dishes {
                guard let id = decoded.id else { continue }
                if let local = localDict[id] {
                    local.updateFromDecoded(decoded)
                    updated += 1
                    changesMade = true
                    localDict.removeValue(forKey: id)
                } else {
                    context.insert(Dish(from: decoded))
                    added += 1
                    changesMade = true
                }
            }
            
            for (_, dish) in localDict {
                context.delete(dish)
                changesMade = true
            }
            
            try context.save()
            
            if changesMade {
                NotificationCenterService.shared.showSuccess("üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ‚ûï \(added), üîÑ \(updated)")
            } else {
                NotificationCenterService.shared.showInfo("‚è© –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∏–∑ Google Drive")
            }
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ Google Drive: \(error)")
            NotificationCenterService.shared.showError("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞", resolution: error.localizedDescription)
        }
    }
    
    // MARK: - –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Drive
    func exportToGoogleDrive(context: ModelContext) async {
        do {
            let dishes = try context.fetch(FetchDescriptor<Dish>())
            let decoded = dishes.map { DishDECOD(id: $0.id, name: $0.name, about: $0.about, imageBase64: $0.imageBase64, category: $0.category ?? .lunch) }
            let container = DishesContainer(dishes: decoded)
            let data = try JSONEncoder().encode(container)
            try await GoogleDriveService.shared.uploadDishesJSON(data)
            print("üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –±–ª—é–¥ –≤ Google Drive: \(dishes.count)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Drive: \(error)")
            NotificationCenterService.shared.showError("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", resolution: error.localizedDescription)
        }
    }
    
    // MARK: - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    func isLocalNetworkReachable() async -> Bool {
        let monitor = NWPathMonitor()
        let queue = DispatchQueue(label: "LocalNetworkMonitor")
        
        return await withCheckedContinuation { continuation in
            monitor.pathUpdateHandler = { path in
                monitor.cancel()
                continuation.resume(returning: path.status == .satisfied)
            }
            monitor.start(queue: queue)
        }
    }

    // MARK: - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    func areCredentialsPresent() -> Bool {
        // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Keychain –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        return false
    }

    // MARK: - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–∏–º–ø–æ—Ä—Ç + —ç–∫—Å–ø–æ—Ä—Ç)
    func syncDishes(context: ModelContext) async {
        await importFromGoogleDrive(context: context)
        await exportToGoogleDrive(context: context)
    }
    
    private func startNetworkMonitor() {
        let monitor = NWPathMonitor()
        monitor.pathUpdateHandler = { [weak self] path in
            if path.status == .satisfied {
                print("‚úÖ –°–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞")
                if let context = self?.latestContext {
                    Task {
                        print("üåê –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏...")
                        await self?.importFromGoogleDrive(context: context)
                    }
                }
            } else {
                print("üö´ –°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            }
        }
        let queue = DispatchQueue(label: "NetworkMonitor")
        monitor.start(queue: queue)
    }
}
